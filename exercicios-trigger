1. Atualizar a função atualizar_time() para todas as atualizações necessárias listadas abaixo:
  - Se a partida houver um vencedor, atualizar a quantidade de derrotas e de vitórias;
2. É necessário contabilizar as informações de gols sofridos e feitos, além de atualizar a pontuação dos times após um jogo ser
realizado, seguindo as seguintes regras:
  - Atualizar as informações de gols pro e gols contra;
  - Atualizar a pontuação dos times de acordo com a situação abaixo:
    • Vencedor: +3 pontos
    • Empate: +1 ponto para cada time
    • Perdedor: não altera a pontuação
3. Crie uma visão para identificar a classificação do campeonato, que deve seguir as seguintes regras de ordenação: pontuação, número de vitórias e saldo de gols.
4. Crie um subprograma que insere um time recebendo apenas o nome do time como argumento e defina o número de ID que deve ser utilizado e inicializando com 0 os demais atributos.
5. Crie um subprograma que retorne a diferença de pontos entre o primeiro e último colocado.
6. Crie um subprograma que recebe o resultado de um jogo entre dois times e realiza a atualização desses dados.
7. Crie um subprograma que retorne os nomes dos times e a quantidade de pontos ordenados de acordo com o critério escolhido:
  - 1 (qtde de pontos), 2 (qtde de vitórias), ou 3 (saldo de gols). RETURN QUERY
O sistema agora deve contabilizar em um atributo quantos
jogos cada time fez, então solicito:
8. Criar um subprograma que cria a coluna num_jogos do tipo inteiro na tabela time e atualiza o valor dessa coluna com a soma dos valores nos seguintes 3 campos:
  - empates, vitórias e derrotas.
9. Executar o subprograma acima, e logo depois deletá-lo.
10. O número de jogos de um time deve ser incrementado antes que um jogo que ele participou seja cadastrado no banco. Criar essa regra de negócio via trigger, lembrando
de atualizar a quantidade de jogos dos dois participantes da partida!!

create table times (
id serial primary key,
nome varchar(30) not null,
num_pontos integer,
vitorias integer,
derrotas integer,
empates integer,
gols_afavor integer,
gols_sofridos integer
);
insert into times values
(1,'Sport',0,0,0,0,0,0),
(2,'Náutico',0,0,0,0,0,0),
(3,'Santa Cruz',0,0,0,0,0,0);

create table jogos (
id_mandante integer,
id_visitante integer,
gols_mandante integer,
gols_visitante integer,
PRIMARY key
(id_mandante, id_visitante),
FOREIGN key (id_mandante)
REFERENCES times (id),
FOREIGN key (id_visitante)
REFERENCES times (id)
);

SELECT * from times;
SELECT * from jogos;

-- 01, 02
CREATE or REPLACE FUNCTION atualizar_time()
RETURNS TRIGGER
LANGUAGE PLPGSQL AS $$
BEGIN
IF new.gols_mandante=NEW.gols_visitante THEN
        update times set empates=empates + 1,
        num_pontos = num_pontos + 1,
        gols_afavor = gols_afavor + NEW.gols_mandante,
        gols_sofridos = gols_sofridos + NEW.gols_visitante 
        where id = NEW.id_mandante;
        update times set empates=empates + 1,
        num_pontos = num_pontos + 1,
        gols_afavor = gols_afavor + NEW.gols_visitante,
        gols_sofridos = gols_sofridos + NEW.gols_mandante 
        where id = new.id_visitante;
    elseif new.gols_mandante > new.gols_visitante THEN
    	UPDATE times set vitorias = vitorias + 1,
        num_pontos = num_pontos + 3,
        gols_afavor = gols_afavor + NEW.gols_mandante,
        gols_sofridos = gols_sofridos + NEW.gols_visitante 
        where id = new.id_mandante;
        UPDATE times set derrotas = derrotas + 1 where id = new.id_visitante;
    else 
    	UPDATE times set vitorias = vitorias + 1,
        num_pontos = num_pontos + 3,
        gols_afavor = gols_afavor + NEW.gols_visitante,
        gols_sofridos = gols_sofridos + NEW.gols_mandante 
        where id = new.id_visitante;
        UPDATE times set derrotas = derrotas + 1 where id = new.id_mandante;
    end if;    
    return NEW;
END; $$

create or REPLACE TRIGGER tr_atualizar_time
BEFORE INSERT on jogos
for EACH ROW
EXECUTE PROCEDURE atualizar_time();

-- Empate entre Sport e Náutico
INSERT INTO jogos (id_mandante, id_visitante, gols_mandante, gols_visitante)
VALUES (1, 2, 1, 1);

-- Vitória do Santa Cruz (visitante) contra Sport
INSERT INTO jogos (id_mandante, id_visitante, gols_mandante, gols_visitante)
VALUES (1, 3, 0, 2);

-- Vitória do Náutico (mandante) contra Santa Cruz
INSERT INTO jogos (id_mandante, id_visitante, gols_mandante, gols_visitante)
VALUES (2, 3, 3, 1);


-- 03
create view classificao as 
SELECT * from times
ORDER by num_pontos desc, vitorias desc, gols_afavor desc;

SELECT * from classificao;

-- 04
CREATE or replace PROCEDURE adicionar_time(nome_time VARCHAR)
LANGUAGE plpgsql AS $$
DECLARE
	id_time INTEGER;
BEGIN
	if not EXISTS (SELECT 1 from times where times.nome = nome_time) THEN
	SELECT count(times.id) + 1 from times into id_time;
	insert into times values (id_time, nome_time,0,0,0,0,0,0);
    ELSE
    RAISE EXCEPTION 'Time já existe!';
    end if;
END; $$

call adicionar_time('Vasco')
call adicionar_time('Flamengo')

-- 05
CREATE OR REPLACE FUNCTION diferenca_times()
RETURNs INTEGER
LANGUAGE plpgsql AS $$
DECLARE
	retorno INTEGER;
    nome_pior VARCHAR;
    nome_melhor VARCHAR;
    melhor INTEGER;
    pior INTEGER;
BEGIN
	SELECT nome into nome_pior FROM times 
    ORDER BY num_pontos ASC, vitorias ASC, gols_afavor ASC 
    LIMIT 1;
    
    SELECT nome into nome_melhor from classificao LIMIT 1;
    
    SELECT num_pontos INTO melhor from times WHERE times.nome = nome_melhor;
    
    SELECT num_pontos INTO pior from times WHERE times.nome = nome_pior;
    retorno := melhor - pior;
    RETURN retorno;
END; $$

SELECT diferenca_times()

-- 07
CREATE OR REPLACE FUNCTION tabela_classificao()
RETURNs TABLE(time_nome VARCHAR, pontos INTEGER)
LANGUAGE plpgsql AS $$
BEGIN
	RETURN QUERY
    SELECT nome, num_pontos FROM times 
    ORDER BY num_pontos DESC, vitorias desc, gols_afavor desc;
END; $$

SELECT * from tabela_classificao();

-- 08
CREATE OR REPLACE PROCEDURE atualizar_num_jogos()
LANGUAGE plpgsql AS $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM information_schema.columns
        WHERE table_name = 'times'
        AND column_name = 'num_jogos'
    ) THEN
        ALTER TABLE times ADD COLUMN num_jogos INTEGER DEFAULT 0;
    END IF;

    UPDATE times
    SET num_jogos = empates + vitorias + derrotas;
END;
$$;

-- 09
call atualizar_num_jogos()
DROP PROCEDURE IF EXISTS atualizar_num_jogos;

-- 10
CREATE OR REPLACE FUNCTION incrementar_num_jogos()
RETURNS TRIGGER
LANGUAGE plpgsql AS $$
BEGIN
    UPDATE times
    SET num_jogos = num_jogos + 1
    WHERE id = NEW.id_mandante;
    
    UPDATE times
    SET num_jogos = num_jogos + 1
    WHERE id = NEW.id_visitante;

    RETURN NEW; 
END;$$;

CREATE TRIGGER tr_incrementar_num_jogos
BEFORE INSERT ON jogos
FOR EACH ROW
EXECUTE FUNCTION incrementar_num_jogos();




